// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  username  String    @unique
  email     String?   @unique
  password  String?
  refreshToken  String?
  bio       String?
  avatarUrl String?
  preferences String?
  role      UserRole  @default(USER)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  wallets   Wallet[]  @relation("UserWallets")
  revokedTokens RevokedToken[]
  
  // Relations for user stats
  followers Follow[] @relation("UserFollowers")
  following Follow[] @relation("UserFollowing")
  posts     Post[]   @relation("UserPosts")
  tipsReceived Tip[] @relation("TipsReceived")
  tipsSent  Tip[] @relation("TipsSent")
}

model Wallet {
  id        String  @id @default(uuid())
  userId    String
  address   String  @unique
  isPrimary Boolean @default(false)
  createdAt DateTime @default(now())
  user      User    @relation("UserWallets", fields: [userId], references: [id]) 
}

model RevokedToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  revokedAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
}

// New models for user stats

model Follow {
  id          String   @id @default(uuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  
  follower    User     @relation("UserFollowing", fields: [followerId], references: [id])
  following   User     @relation("UserFollowers", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
}

enum Visibility {
  public
  private
  followers_only
}

model Post {
  id         String     @id @default(uuid())
  userId     String
  content    String
  media      String?
  tags       String[]
  category   String
  isMinted   Boolean @default(false)
  
  visibility Visibility @default(public)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  user       User       @relation("UserPosts", fields: [userId], references: [id])
  tips       Tip[]      @relation("PostTips")
}

model Tip {
  id        String   @id @default(uuid())
  amount    Float
  senderId  String
  receiverId String
  postId    String?
  createdAt DateTime @default(now())
  
  sender    User     @relation("TipsSent", fields: [senderId], references: [id])
  receiver  User     @relation("TipsReceived", fields: [receiverId], references: [id])
  post      Post?    @relation("PostTips", fields: [postId], references: [id])
}

// Nonce table for tracking one-time nonces
model Nonce {
  id        String   @id @default(uuid())
  address   String
  nonce     String
  createdAt DateTime @default(now())
  expiresAt DateTime?

  @@unique([address])
}

enum UserRole {
  USER
  CREATOR
  MODERATOR
  ADMIN
}
